import re
import streamlit as st
from datetime import datetime

def load_css(file_path):
    """Load CSS from external file"""
    try:
        with open(file_path, 'r') as f:
            css = f.read()
        st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.warning(f"CSS file not found: {file_path}")

def load_html_template(file_path):
    """Load HTML template from external file"""
    try:
        with open(file_path, 'r') as f:
            return f.read()
    except FileNotFoundError:
        st.warning(f"HTML template file not found: {file_path}")
        return ""

def clean_response_text(text):
    """Clean and format response text from agents"""
    if not text:
        return "No response available"
    
    # Convert to string if it's not already
    text = str(text)
    
    # Remove JSON-like formatting
    text = re.sub(r'^\s*[\{\[].*?[\}\]]\s*$', '', text, flags=re.DOTALL)
    
    # Remove extra quotes and escape characters
    text = text.replace('\\"', '"').replace('\\n', '\n').replace('\\t', '\t')
    
    # Remove leading/trailing quotes if present
    text = text.strip('"\'')
    
    # Clean up multiple newlines
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)
    
    # Remove any remaining JSON artifacts
    text = re.sub(r'^\s*".*?":\s*"', '', text)
    text = re.sub(r'",?\s*$', '', text)
    
    return text.strip()

def get_weather_emoji(description):
    """Get appropriate emoji for weather condition"""
    description_lower = description.lower()
    
    if "rain" in description_lower:
        return "üåßÔ∏è"
    elif "cloud" in description_lower:
        return "‚òÅÔ∏è"
    elif "clear" in description_lower:
        return "‚òÄÔ∏è"
    elif "snow" in description_lower:
        return "‚ùÑÔ∏è"
    elif "thunder" in description_lower:
        return "‚õàÔ∏è"
    elif "mist" in description_lower or "fog" in description_lower:
        return "üå´Ô∏è"
    elif "wind" in description_lower:
        return "üí®"
    else:
        return "üå§Ô∏è"

def format_time():
    """Get current formatted time"""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def validate_api_key(api_key, key_name):
    """Validate API key format"""
    if not api_key:
        return False, f"{key_name} is required"
    
    if len(api_key) < 10:
        return False, f"{key_name} appears to be too short"
    
    return True, "Valid"

def create_download_content(tour_data):
    """Create formatted content for download"""
    return f"""# Weather-Aware Foodie Tour: {tour_data['city']}

Generated on: {format_time()}

## üå§Ô∏è Weather Analysis
{tour_data.get('weather_analysis', 'N/A')}

## üçú Perfect Dishes for Today
{tour_data.get('dishes', 'N/A')}

## üè® Restaurant Recommendations
{tour_data.get('restaurants', 'N/A')}

## üìñ Day Adventure Timeline
{tour_data.get('narrative', 'N/A')}

## üéØ Complete Guide
{tour_data.get('final_tour', 'N/A')}

---
*Generated by Weather-Aware Foodie Tours*
"""

def show_progress_with_message(progress_value, message):
    """Show progress bar with custom message"""
    progress_bar = st.progress(progress_value)
    status_text = st.empty()
    status_text.text(message)
    return progress_bar, status_text

def clear_progress(progress_bar, status_text):
    """Clear progress indicators"""
    progress_bar.empty()
    status_text.empty()